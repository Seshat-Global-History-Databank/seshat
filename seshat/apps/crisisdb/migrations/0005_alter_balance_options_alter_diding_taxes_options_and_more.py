# Generated by Django 4.0.3 on 2022-04-11 15:08

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0002_reference_long_name_alter_reference_title"),
        (
            "crisisdb",
            "0004_rename_tariff_and_ransit_tariff_and_transit_tariff_and_transit",
        ),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="balance",
            options={"verbose_name": "Balance", "verbose_name_plural": "Balances"},
        ),
        migrations.AlterModelOptions(
            name="diding_taxes",
            options={
                "verbose_name": "Diding_taxes",
                "verbose_name_plural": "Diding_taxes",
            },
        ),
        migrations.AlterModelOptions(
            name="land_taxes_collected",
            options={
                "verbose_name": "Land_taxes_collected",
                "verbose_name_plural": "Land_taxes_collecteds",
            },
        ),
        migrations.AlterModelOptions(
            name="land_yield",
            options={
                "verbose_name": "Land_yield",
                "verbose_name_plural": "Land_yields",
            },
        ),
        migrations.AlterModelOptions(
            name="lijin",
            options={"verbose_name": "Lijin", "verbose_name_plural": "Lijins"},
        ),
        migrations.AlterModelOptions(
            name="maritime_custom",
            options={
                "verbose_name": "Maritime_custom",
                "verbose_name_plural": "Maritime_customs",
            },
        ),
        migrations.AlterModelOptions(
            name="misc_incomes",
            options={
                "verbose_name": "Misc_incomes",
                "verbose_name_plural": "Misc_incomes",
            },
        ),
        migrations.AlterModelOptions(
            name="other_incomes",
            options={
                "verbose_name": "Other_incomes",
                "verbose_name_plural": "Other_incomes",
            },
        ),
        migrations.AlterModelOptions(
            name="revenue_official",
            options={
                "verbose_name": "Revenue_official",
                "verbose_name_plural": "Revenue_officials",
            },
        ),
        migrations.AlterModelOptions(
            name="revenue_real",
            options={
                "verbose_name": "Revenue_real",
                "verbose_name_plural": "Revenue_reals",
            },
        ),
        migrations.AlterModelOptions(
            name="salt_tax",
            options={"verbose_name": "Salt_tax", "verbose_name_plural": "Salt_taxes"},
        ),
        migrations.AlterModelOptions(
            name="tariff_and_transit",
            options={
                "verbose_name": "Tariff_and_transit",
                "verbose_name_plural": "Tariff_and_transits",
            },
        ),
        migrations.AlterModelOptions(
            name="total_economic_output",
            options={
                "verbose_name": "Total_economic_output",
                "verbose_name_plural": "Total_economic_outputs",
            },
        ),
        migrations.AlterModelOptions(
            name="total_expenditure",
            options={
                "verbose_name": "Total_expenditure",
                "verbose_name_plural": "Total_expenditures",
            },
        ),
        migrations.AlterModelOptions(
            name="total_revenue",
            options={
                "verbose_name": "Total_revenue",
                "verbose_name_plural": "Total_revenues",
            },
        ),
        migrations.AlterModelOptions(
            name="total_tax",
            options={"verbose_name": "Total_tax", "verbose_name_plural": "Total_taxes"},
        ),
        migrations.AddField(
            model_name="balance",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="diding_taxes",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="land_taxes_collected",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="land_yield",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="lijin",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="maritime_custom",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="misc_incomes",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="other_incomes",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="population",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="revenue_official",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="revenue_real",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="salt_tax",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="tariff_and_transit",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="total_economic_output",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="total_expenditure",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="total_revenue",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="total_tax",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Add an Optional note or a personal comment above.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="population",
            name="total_population",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="Worker_wage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                ("name", models.CharField(default="Worker_wage", max_length=100)),
                ("worker_wage", models.CharField(max_length=500)),
                ("area", models.CharField(max_length=500)),
                (
                    "unskilled_construction",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                (
                    "skilled_construction",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                (
                    "number_of_districts_with_available_data",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "unskilled_arms_manufacturer",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                (
                    "population_in_millions_in_1787",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Worker_wage",
                "verbose_name_plural": "Worker_wages",
            },
        ),
        migrations.CreateModel(
            name="Wages",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                ("name", models.CharField(default="Wages", max_length=100)),
                (
                    "wages",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wages",
                "verbose_name_plural": "Wages",
            },
        ),
        migrations.CreateModel(
            name="Taiping_rebellion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                ("name", models.CharField(default="Taiping_rebellion", max_length=100)),
                ("taiping_rebellion", models.CharField(max_length=500)),
                ("rebel", models.CharField(max_length=500)),
                ("place", models.CharField(max_length=500)),
                ("ethnic_composition", models.CharField(max_length=500)),
                ("family_background", models.CharField(max_length=500)),
                ("role", models.CharField(max_length=500)),
                ("rank", models.CharField(max_length=500)),
                ("civil_examination", models.CharField(max_length=500)),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Taiping_rebellion",
                "verbose_name_plural": "Taiping_rebellions",
            },
        ),
        migrations.CreateModel(
            name="Shares_of_world_gdp",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                (
                    "name",
                    models.CharField(default="Shares_of_world_gdp", max_length=100),
                ),
                (
                    "shares_of_world_GDP",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Shares_of_world_gdp",
                "verbose_name_plural": "Shares_of_world_gdps",
            },
        ),
        migrations.CreateModel(
            name="Rate_of_return",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                ("name", models.CharField(default="Rate_of_return", max_length=100)),
                ("rate_of_return", models.IntegerField(blank=True, null=True)),
                (
                    "job_category",
                    models.CharField(
                        choices=[
                            (
                                "jobs requiring jinshi or juren examinations",
                                "jobs requiring jinshi or juren examinations",
                            ),
                            (
                                "jobs requiring shengyuan examination",
                                "jobs requiring shengyuan examination",
                            ),
                            (
                                "jobs with less than shengyuan education",
                                "jobs with less than shengyuan education",
                            ),
                        ],
                        max_length=500,
                    ),
                ),
                (
                    "job_description",
                    models.CharField(
                        choices=[
                            (
                                "official service in central government or local government",
                                "official service in central government or local government",
                            ),
                            (
                                "secretarial assistants to high provincial officials",
                                "secretarial assistants to high provincial officials",
                            ),
                            ("lecturer in large shuyuan", "lecturer in large shuyuan"),
                            (
                                "secretarial assistants to prefects and counties",
                                "secretarial assistants to prefects and counties",
                            ),
                            (
                                "scholar doctor in local community",
                                "scholar doctor in local community",
                            ),
                            (
                                "service as gentry functions",
                                "service as gentry functions",
                            ),
                            ("teacher in local school", "teacher in local school"),
                            ("other services", "other services"),
                            (
                                "skilled labour in silk-reel industry",
                                "skilled labour in silk-reel industry",
                            ),
                            (
                                "teacher in local primary school",
                                "teacher in local primary school",
                            ),
                        ],
                        max_length=500,
                    ),
                ),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rate_of_return",
                "verbose_name_plural": "Rate_of_returns",
            },
        ),
        migrations.CreateModel(
            name="Rate_of_gdp_per_capita_growth",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="Rate_of_gdp_per_capita_growth", max_length=100
                    ),
                ),
                (
                    "rate_of_GDP_per_capita_growth",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rate_of_gdp_per_capita_growth",
                "verbose_name_plural": "Rate_of_gdp_per_capita_growths",
            },
        ),
        migrations.CreateModel(
            name="Jinshi_degrees_awarded",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                (
                    "name",
                    models.CharField(default="Jinshi_degrees_awarded", max_length=100),
                ),
                ("emperor", models.CharField(max_length=500)),
                ("jinshi_degrees_awarded", models.IntegerField(blank=True, null=True)),
                ("population_in_year_x", models.IntegerField(blank=True, null=True)),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Jinshi_degrees_awarded",
                "verbose_name_plural": "Jinshi_degrees_awardeds",
            },
        ),
        migrations.CreateModel(
            name="Gdp_total",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                ("name", models.CharField(default="Gdp_total", max_length=100)),
                ("GDP_total", models.IntegerField(blank=True, null=True)),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Gdp_total",
                "verbose_name_plural": "Gdp_totals",
            },
        ),
        migrations.CreateModel(
            name="Gdp_per_capita",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                ("name", models.CharField(default="Gdp_per_capita", max_length=100)),
                ("GDP_per_capita", models.IntegerField(blank=True, null=True)),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Gdp_per_capita",
                "verbose_name_plural": "Gdp_per_capitas",
            },
        ),
        migrations.CreateModel(
            name="Gdp_growth_rate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                ("name", models.CharField(default="Gdp_growth_rate", max_length=100)),
                (
                    "GDP_growth_rate",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Gdp_growth_rate",
                "verbose_name_plural": "Gdp_growth_rates",
            },
        ),
        migrations.CreateModel(
            name="Famine_event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                ("name", models.CharField(default="Famine_event", max_length=100)),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                ("famine_event", models.IntegerField(blank=True, null=True)),
                (
                    "elevation",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                (
                    "sub_category",
                    models.CharField(
                        choices=[
                            ("Famine", "Famine"),
                            ("Human-Eating", "Human-Eating"),
                        ],
                        max_length=500,
                    ),
                ),
                (
                    "magnitude",
                    models.CharField(
                        choices=[
                            ("Uncertain", "Uncertain"),
                            ("Heavy", "Heavy"),
                            ("Light", "Light"),
                            ("Heavy- Multiple Times", "Heavy- Multiple Times"),
                            ("No Happening", "No Happening"),
                            ("No description", "No description"),
                            ("Nonspecified", "Nonspecified"),
                        ],
                        max_length=500,
                    ),
                ),
                (
                    "duration",
                    models.CharField(
                        choices=[
                            ("1 to 10 Days", "1 to 10 Days"),
                            ("20 to 30 Days", "20 to 30 Days"),
                            ("30 to 60 Days", "30 to 60 Days"),
                            ("60 to 90 Days", "60 to 90 Days"),
                            ("Over 90 Days", "Over 90 Days"),
                            ("No description", "No description"),
                            ("Uncertain", "Uncertain"),
                        ],
                        max_length=500,
                    ),
                ),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Famine_event",
                "verbose_name_plural": "Famine_events",
            },
        ),
        migrations.CreateModel(
            name="Examination",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                ("name", models.CharField(default="Examination", max_length=100)),
                ("examination", models.CharField(max_length=500)),
                ("no_of_participants", models.IntegerField(blank=True, null=True)),
                ("degrees_awarded", models.IntegerField(blank=True, null=True)),
                (
                    "passing_ratio",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                ("place", models.CharField(max_length=500)),
                (
                    "ratio_examiner_per_candidate",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                ("no_of_examiners", models.IntegerField(blank=True, null=True)),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Examination",
                "verbose_name_plural": "Examinations",
            },
        ),
        migrations.CreateModel(
            name="Disease_event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                ("name", models.CharField(default="Disease_event", max_length=100)),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                ("disease_event", models.IntegerField(blank=True, null=True)),
                (
                    "elevation",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=25, null=True
                    ),
                ),
                (
                    "sub_category",
                    models.CharField(
                        choices=[
                            ("Pestilence", "Pestilence"),
                            ("Peculiar Epidemics", "Peculiar Epidemics"),
                            ("Pox", "Pox"),
                            ("Miasm", "Miasm"),
                            ("Malaria", "Malaria"),
                            ("Dysentery", "Dysentery"),
                            ("Uncertain Pestilence", "Uncertain Pestilence"),
                        ],
                        max_length=500,
                    ),
                ),
                (
                    "magnitude",
                    models.CharField(
                        choices=[
                            ("Uncertain", "Uncertain"),
                            ("Heavy", "Heavy"),
                            ("Light", "Light"),
                            ("Heavy- Multiple Times", "Heavy- Multiple Times"),
                            ("No Happening", "No Happening"),
                            ("No description", "No description"),
                            ("Nonspecified", "Nonspecified"),
                        ],
                        max_length=500,
                    ),
                ),
                (
                    "duration",
                    models.CharField(
                        choices=[
                            ("1 to 10 Days", "1 to 10 Days"),
                            ("20 to 30 Days", "20 to 30 Days"),
                            ("30 to 60 Days", "30 to 60 Days"),
                            ("60 to 90 Days", "60 to 90 Days"),
                            ("Over 90 Days", "Over 90 Days"),
                            ("No description", "No description"),
                            ("Uncertain", "Uncertain"),
                        ],
                        max_length=500,
                    ),
                ),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Disease_event",
                "verbose_name_plural": "Disease_events",
            },
        ),
        migrations.CreateModel(
            name="Annual_wages",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_from", models.IntegerField(blank=True, null=True)),
                ("year_to", models.IntegerField(blank=True, null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional description or a personal comment above.",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Add an Optional note or a personal comment above.",
                        null=True,
                    ),
                ),
                ("finalized", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_date", models.DateTimeField(auto_now=True, null=True)),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("TRS", "Trusted"),
                            ("DSP", "Disputed"),
                            ("SSP", "Suspected"),
                            ("IFR", "Inferred"),
                            ("UNK", "Unknown"),
                        ],
                        default="TRS",
                        max_length=5,
                    ),
                ),
                ("name", models.CharField(default="Annual_wages", max_length=100)),
                ("annual_wages", models.IntegerField(blank=True, null=True)),
                (
                    "job_category",
                    models.CharField(
                        choices=[
                            (
                                "jobs requiring jinshi or juren examinations",
                                "jobs requiring jinshi or juren examinations",
                            ),
                            (
                                "jobs requiring shengyuan examination",
                                "jobs requiring shengyuan examination",
                            ),
                            (
                                "jobs with less than shengyuan education",
                                "jobs with less than shengyuan education",
                            ),
                            (
                                "jobs requiring no education",
                                "jobs requiring no education",
                            ),
                        ],
                        max_length=500,
                    ),
                ),
                (
                    "job_description",
                    models.CharField(
                        choices=[
                            (
                                "official service in central government or local government",
                                "official service in central government or local government",
                            ),
                            (
                                "secretarial assistants to high provincial officials",
                                "secretarial assistants to high provincial officials",
                            ),
                            ("lecturer in large shuyuan", "lecturer in large shuyuan"),
                            (
                                "secretarial assistants to prefects and counties",
                                "secretarial assistants to prefects and counties",
                            ),
                            (
                                "scholar doctor in local community",
                                "scholar doctor in local community",
                            ),
                            (
                                "service as gentry functions",
                                "service as gentry functions",
                            ),
                            ("teacher in local school", "teacher in local school"),
                            ("other services", "other services"),
                            (
                                "skilled labour in silk-reel industry",
                                "skilled labour in silk-reel industry",
                            ),
                            (
                                "teacher in local primary school",
                                "teacher in local primary school",
                            ),
                            (
                                "general unskilled labour in big city",
                                "general unskilled labour in big city",
                            ),
                            (
                                "general unskilled labour in small town or village",
                                "general unskilled labour in small town or village",
                            ),
                        ],
                        max_length=500,
                    ),
                ),
                (
                    "citations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select one or more references for this fact. Hold CTRL to select multiple.",
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.citation",
                    ),
                ),
                (
                    "polity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.polity",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.section",
                    ),
                ),
                (
                    "subsection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="core.subsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Annual_wages",
                "verbose_name_plural": "Annual_wages",
            },
        ),
    ]
